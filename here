import React, { useState, useEffect } from "react";
import { Treebeard } from "react-treebeard";
import TilesRendering from "./TilesRendering";

const data = {
  // Your tree data
};

const TreeView = () => {
  const [selectedNode, setSelectedNode] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [filteredData, setFilteredData] = useState(data);

  useEffect(() => {
    const filterTree = (node, term) => {
      if (node.name.toLowerCase().includes(term.toLowerCase())) {
        return { ...node, toggled: true };
      }

      if (node.children) {
        const filteredChildren = node.children
          .map((child) => filterTree(child, term))
          .filter((child) => child);
        
        if (filteredChildren.length > 0) {
          return { ...node, toggled: true, children: filteredChildren };
        }
      }

      return null;
    };

    const filteredTree = filterTree(data, searchTerm);
    setFilteredData(filteredTree || data);
  }, [searchTerm]);

  const onToggle = (node, toggled) => {
    if (selectedNode) {
      selectedNode.active = false;
    }
    node.active = true;
    if (node.children) {
      node.toggled = toggled;
    }
    setSelectedNode(node);
  };

  const renderChildrenAsTiles = () => {
    if (selectedNode && selectedNode.children) {
      return (
        <div>
          {selectedNode.children.map((child) => (
            <TilesRendering key={child.id} selectedNode={child} />
          ))}
        </div>
      );
    }
    return null;
  };

  return (
    <div style={{ display: "flex" }}>
      <div style={{ width: "30%" }}>
        <input
          type="text"
          placeholder="Search..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <Treebeard
          data={filteredData}
          onToggle={onToggle}
        />
      </div>

      <div style={{ marginLeft: "20px" }}>
        {renderChildrenAsTiles()}
      </div>
    </div>
  );
};

export default TreeView;
