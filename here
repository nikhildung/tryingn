const App = () => {
  const [selectedNode, setSelectedNode] = useState(products[0]);

  const selectProduct = (e) => {
    if (e.itemData.ID.length === 1) {
      // Toggle the expansion of the selected node
      setSelectedNode((prevNode) => 
        prevNode.ID === e.itemData.ID ? { ...prevNode, expanded: !prevNode.expanded } : e.itemData
      );
    } else if (e.itemData.categoryId.length === 1) {
      // Redirect to "apitemplate" when a category node is clicked
      window.location.href = "apitemplate";
    }
  };

  const renderProductDetails = (node) => {
    if (node.ID.length === 1) {
      return (
        <div id="product-details">
          <div className="name">{node.name}</div>
        </div>
      );
    } else {
      // Render child products when the node is expanded
      return node.expanded && (
        <div id="product-details">
          {products
            .filter((product) => product.categoryId === node.ID)
            .map((child) => (
              <div key={child.ID} className="name">{child.name}</div>
            ))}
        </div>
      );
    }
  };

  return (
    <div>
      <TreeView 
        id="treeView"
        dataSource={products}
        dataStructure="plain"
        keyExpr="ID"
        displayExpr="name"
        parentIdExpr="categoryId"
        searchEnabled={true}
        searchMode="startswith"
        selectionMode="single"
        selectByClick={true}
        onItemSelectionChanged={selectProduct}
      />

      {renderProductDetails(selectedNode)}
    </div>
  );
};

export default App;
