import React, { useState, useEffect } from 'react';
import './Sidebarsection.css';
import Task_Navbarlinks from '../Task_Navbarlinks';
import jsonData from '../API/Sidebar.json';

const SidebarSection = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredData, setFilteredData] = useState(jsonData);
  const [expandedNodes, setExpandedNodes] = useState([]);

  const TreeNode = ({ node, onNodeClick }) => {
    const [isOpen, setIsOpen] = useState(false);

    const handleNodeClick = () => {
      setIsOpen(!isOpen);
      onNodeClick(node);
    };

    useEffect(() => {
      // Expand the node if it's in the filtered data
      if (filteredData.some(filteredNode => filteredNode.id === node.id)) {
        setIsOpen(true);
      }
    }, [filteredData, node]);

    // Automatically expand parent nodes if they contain a matching child
    useEffect(() => {
      if (node.children && node.children.some(child => child.name.toLowerCase().includes(searchTerm.toLowerCase()))) {
        setExpandedNodes((prevExpandedNodes) => [...prevExpandedNodes, node.id]);
      }
    }, [searchTerm, node]);

    const isNodeExpanded = expandedNodes.includes(node.id);

    return (
      <li>
        <span onClick={handleNodeClick}>{node.name}</span>
        {(isOpen || isNodeExpanded) && node.children.length > 0 && (
          <ul>
            {node.children.map(child => (
              <TreeNode key={child.id} node={child} onNodeClick={onNodeClick} />
            ))}
          </ul>
        )}
      </li>
    );
  };

  const handleNodeClick = (node) => {
    console.log(`Clicked on ${node.name}`);
    // Add your logic for handling node clicks here
  };

  const handleSearch = (event) => {
    const searchTerm = event.target.value.toLowerCase();
    setSearchTerm(searchTerm);

    // Filter the data based on the search term
    const filteredNodes = filterNodes(jsonData, searchTerm);
    setFilteredData(filteredNodes);
  };

  const filterNodes = (nodes, term) => {
    return nodes.filter(node => {
      const nodeMatches = node.name.toLowerCase().includes(term);
      const childMatches = node.children && filterNodes(node.children, term).length > 0;

      if (nodeMatches) {
        // Expand the parent node when a matching child is found
        setExpandedNodes((prevExpandedNodes) => [...prevExpandedNodes, node.id]);
      }

      return nodeMatches || childMatches;
    });
  };

  return (
    <div>
      <aside className='API_aside'>
        <h2>Categories</h2>
        <input
          type="text"
          placeholder="Search..."
          value={searchTerm}
          onChange={handleSearch}
        />
        <ul>
          {filteredData.map(parent => (
            <TreeNode key={parent.id} node={parent} onNodeClick={handleNodeClick} />
          ))}
        </ul>
      </aside>
    </div>
  );
};

export default SidebarSection;
