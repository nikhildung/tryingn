import React, { useState } from 'react';

const TreeNode = ({ node, onToggle, searchQuery }) => {
  const [isOpen, setIsOpen] = useState(false);

  const handleToggle = () => {
    setIsOpen(!isOpen);
    onToggle(node.id, !isOpen);
  };

  const isNodeMatchingSearch = node.name.toLowerCase().includes(searchQuery.toLowerCase());
  const hasMatchingChildren = node.children && node.children.some((child) => child.name.toLowerCase().includes(searchQuery.toLowerCase()));

  return (
    <div style={{ display: isNodeMatchingSearch || hasMatchingChildren ? 'block' : 'none' }}>
      <div onClick={handleToggle} style={{ cursor: 'pointer', fontWeight: 'bold' }}>
        {node.name}
      </div>
      {isOpen && node.children && node.children.length > 0 && (
        <div style={{ marginLeft: '20px' }}>
          {node.children.map((child) => (
            <TreeNode key={child.id} node={child} onToggle={onToggle} searchQuery={searchQuery} />
          ))}
        </div>
      )}
    </div>
  );
};

const TreeView = ({ data }) => {
  const [openNodes, setOpenNodes] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');

  const handleToggle = (nodeId, isOpen) => {
    if (isOpen) {
      setOpenNodes((prevOpenNodes) => [...prevOpenNodes, nodeId]);
    } else {
      setOpenNodes((prevOpenNodes) => prevOpenNodes.filter((id) => id !== nodeId));
    }
  };

  const handleSearch = (e) => {
    setSearchQuery(e.target.value);
  };

  const renderTreeNodes = (nodes) =>
    nodes.map((node) => (
      <TreeNode key={node.id} node={node} onToggle={handleToggle} searchQuery={searchQuery} />
    ));

  const filteredData = (nodes, search) => {
    return nodes
      .filter((node) => node.name.toLowerCase().includes(search.toLowerCase()))
      .map((node) => ({
        ...node,
        children: filteredData(node.children || [], search),
      }));
  };

  const filteredTree = filteredData(data, searchQuery);

  return (
    <div>
      <input
        type="text"
        placeholder="Search..."
        value={searchQuery}
        onChange={handleSearch}
      />
      {renderTreeNodes(filteredTree)}
    </div>
  );
};

export default TreeView;
