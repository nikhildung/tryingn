const App = () => {
  const [selectedNode, setSelectedNode] = useState(products[0]);

  const selectProduct = (e) => {
    if (e.itemData.ID.length === 1) {
      // Toggle the expansion of the selected node
      setSelectedNode((prevNode) => 
        prevNode.ID === e.itemData.ID ? { ...prevNode, expanded: !prevNode.expanded } : e.itemData
      );
    } else if (e.itemData.categoryId.length === 1) {
      // Update selectedNode to the clicked parent category
      setSelectedNode(e.itemData);
    }
  };

  const renderProductDetails = () => {
    return (
      <div id="product-details">
        {products
          .filter((product) => product.categoryId === selectedNode.ID)
          .map((child) => (
            <TilesRendering key={child.ID} selectedNode={child} />
          ))}
      </div>
    );
  };

  return (
    <div>
      <TreeView 
        id="treeView"
        dataSource={products}
        dataStructure="plain"
        keyExpr="ID"
        displayExpr="name"
        parentIdExpr="categoryId"
        searchEnabled={true}
        searchMode="startswith"
        selectionMode="single"
        selectByClick={true}
        onItemSelectionChanged={selectProduct}
      />

      {renderProductDetails()}
    </div>
  );
};

export default App;
