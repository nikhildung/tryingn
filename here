import React, { useState, useEffect } from "react";
import { TreeView } from "@mui/x-tree-view/TreeView";
import { TreeItem } from "@mui/x-tree-view/TreeItem";
import TilesRendering from "../ExploreAPI/TilesRendering"; // Replace with the actual path to your TilesRendering component

const data = [
  // ... your data
];

const Homepage = () => {
  const [selectedNode, setSelectedNode] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [filteredData, setFilteredData] = useState(data);

  useEffect(() => {
    const filterTree = (nodes, term) => {
      return nodes.map((node) => {
        const filteredNode = {
          ...node,
          children: node.children ? filterTree(node.children, term) : null,
        };

        if (term && !filteredNode.label.toLowerCase().includes(term.toLowerCase())) {
          // If search term is provided and node doesn't match, check its children
          if (filteredNode.children) {
            const filteredChildren = filterTree(filteredNode.children, term);
            filteredNode.children = filteredChildren.length > 0 ? filteredChildren : null;
          }
        }

        return filteredNode;
      });
    };

    const filteredTree = filterTree(data, searchTerm);
    setFilteredData(filteredTree);
  }, [searchTerm, data]);

  const handleNodeSelect = (event, nodeId) => {
    // Find the selected node from the data based on the nodeId
    const findNode = (nodes) => {
      for (let node of nodes) {
        if (node.id === nodeId) {
          return node;
        }
        if (node.children) {
          const foundInChildren = findNode(node.children);
          if (foundInChildren) {
            return foundInChildren;
          }
        }
      }
      return null;
    };

    const selectedData = findNode(data);
    setSelectedNode(selectedData);

    if (selectedData.id.length > 1) {
      window.location.href = "apitemplate";
    }
    // Add your custom logic here for redirecting or any other actions
  };

  const renderTree = (nodes) => (
    <TreeItem
      key={nodes.id}
      nodeId={nodes.id}
      label={nodes.name}
      defaultCollapseIcon={<span>-</span>}
      defaultExpandIcon={<span>+</span>}
    >
      {Array.isArray(nodes.children)
        ? nodes.children.map((node) => renderTree(node))
        : null}
    </TreeItem>
  );

  const renderChildrenAsTiles = (selectedNode) => {
    if (selectedNode && selectedNode.children) {
      return (
        <div>
          {selectedNode.children.map((child) => (
            <TilesRendering key={child.id} selectedNode={child} />
          ))}
        </div>
      );
    }
    return null;
  };

  return (
    <div style={{ display: "flex", flexDirection: "column" }}>
      <input
        type="text"
        placeholder="Search..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
      />
      <TreeView
        defaultCollapseIcon={<span>-</span>}
        defaultExpandIcon={<span>+</span>}
        onNodeSelect={handleNodeSelect}
      >
        {filteredData.map((node) => renderTree(node))}
      </TreeView>
      <div style={{ marginLeft: "20px" }}>
        {renderChildrenAsTiles(selectedNode)}
      </div>
    </div>
  );
};

export default Homepage;
