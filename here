import React, { useState, useEffect } from "react";
import { TreeView } from "@mui/x-tree-view/TreeView";
import { TreeItem } from "@mui/x-tree-view/TreeItem";
import TilesRendering from "../ExploreAPI/TilesRendering"; // Replace with the actual path to your TilesRendering component
import data from "../ExploreAPI/ExploreAPIPage.json";

const Homepage = () => {
  const [selectedNode, setSelectedNode] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [filteredData, setFilteredData] = useState(null);
  const [expandedNodes, setExpandedNodes] = useState([]);

  useEffect(() => {
    // Automatically expand nodes based on the search term
    if (searchTerm && filteredData && filteredData.length > 0) {
      const pathToNode = findNodePath(data, searchTerm);
      setExpandedNodes(pathToNode);
    } else {
      setExpandedNodes([]); // Collapse all nodes when there's no search term or no matching results
    }
  }, [searchTerm, filteredData]);

  const handleNodeSelect = (event, nodeId) => {
    const findNode = (nodes) => {
      for (let node of nodes) {
        if (node.id === nodeId) {
          return node;
        }
        if (node.children) {
          const foundInChildren = findNode(node.children);
          if (foundInChildren) {
            return foundInChildren;
          }
        }
      }
      return null;
    };

    const selectedData = findNode(filteredData || data);
    setSelectedNode(selectedData);

    if (selectedData && selectedData.id.length > 1) {
      window.location.href = "apitemplate";
    }
  };

  const handleSearch = (event) => {
    const searchTerm = event.target.value.toLowerCase();
    setSearchTerm(searchTerm);

    // Filter the data based on the search term
    const filteredNodes = filterNodes(data, searchTerm);
    setFilteredData(filteredNodes);

    // Automatically expand nodes based on the search term
    if (searchTerm && filteredNodes && filteredNodes.length > 0) {
      const pathToNode = findNodePath(data, searchTerm);
      setExpandedNodes(pathToNode);
    } else {
      setExpandedNodes([]); // Collapse all nodes when there's no search term or no matching results
    }
  };

  const filterNodes = (nodes, term, parentName = "") => {
    return nodes.filter((node) => {
      const nodeName = node.name.toLowerCase();
      const nodeMatches = nodeName.includes(term);
      const children = filterNodes(node.children || [], term, nodeName);

      if (nodeMatches || children.length > 0) {
        node.children = children;
        return true;
      }

      return false;
    });
  };

  const findNodePath = (nodes, term, currentPath = []) => {
    for (let node of nodes) {
      const nodeName = node.name.toLowerCase();
      if (nodeName.includes(term)) {
        return [...currentPath, node.id];
      }
      if (node.children) {
        const pathInChildren = findNodePath(node.children, term, [
          ...currentPath,
          node.id,
        ]);
        if (pathInChildren.length > currentPath.length) {
          return pathInChildren;
        }
      }
    }
    return currentPath;
  };

  const renderTree = (nodes) => (
    <TreeItem
      key={nodes.id}
      nodeId={nodes.id}
      label={nodes.name}
      defaultCollapseIcon={<span>-</span>}
      defaultExpandIcon={<span>+</span>}
      expanded={expandedNodes.includes(nodes.id)}
    >
      {Array.isArray(nodes.children)
        ? nodes.children.map((node) => renderTree(node))
        : null}
    </TreeItem>
  );

  const renderChildrenAsTiles = (selectedNode) => {
    if (selectedNode && selectedNode.children) {
      return (
        <div>
          {selectedNode.children.map((child) => (
            <TilesRendering key={child.id} selectedNode={child} />
          ))}
        </div>
      );
    }
    return null;
  };

  return (
    <>
      <div>
        <h2>Categories</h2>
        <input
          type="text"
          placeholder="Search..."
          value={searchTerm}
          onChange={handleSearch}
        />
      </div>
      <div style={{ display: "flex" }}>
        {(filteredData && filteredData.length > 0) || !searchTerm ? (
          <TreeView
            defaultCollapseIcon={<span>-</span>}
            defaultExpandIcon={<span>+</span>}
            onNodeSelect={handleNodeSelect}
            expanded={expandedNodes}
            onNodeToggle={(event, nodes) => setExpandedNodes(nodes)}
          >
            {filteredData
              ? filteredData.map((node) => renderTree(node))
              : data.map((node) => renderTree(node))}
          </TreeView>
        ) : (
          <h1>No matching results</h1>
        )}

        <div style={{ marginLeft: "20px" }}>
          {renderChildrenAsTiles(selectedNode)}
        </div>
      </div>
    </>
  );
};

export default Homepage;
