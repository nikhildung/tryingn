import React, { useState } from "react";
import { TreeView } from "@mui/x-tree-view/TreeView";
import { TreeItem } from "@mui/x-tree-view/TreeItem";
import TilesRendering from "../ExploreAPI/TilesRendering"; // Replace with the actual path to your TilesRendering component

const data = [
  // ... your data
];

const Homepage = () => {
  const [selectedNode, setSelectedNode] = useState(null);
  const [filterText, setFilterText] = useState(""); // State to hold filter text

  const handleNodeSelect = (event, nodeId) => {
    // Find the selected node from the data based on the nodeId
    const findNode = (nodes) => {
      for (let node of nodes) {
        if (node.id === nodeId) {
          return node;
        }
        if (node.children) {
          const foundInChildren = findNode(node.children);
          if (foundInChildren) {
            return foundInChildren;
          }
        }
      }
      return null;
    };

    const selectedData = findNode(data);
    setSelectedNode(selectedData);

    if (selectedData && selectedData.id.length > 1) {
      window.location.href = "apitemplate";
    }
    // Add your custom logic here for redirecting or any other actions
  };

  const renderTree = (nodes) => (
    <TreeItem
      key={nodes.id}
      nodeId={nodes.id}
      label={nodes.name}
      defaultCollapseIcon={<span>-</span>}
      defaultExpandIcon={<span>+</span>}
    >
      {Array.isArray(nodes.children)
        ? nodes.children.map((node) => renderTree(node))
        : null}
    </TreeItem>
  );

  const renderChildrenAsTiles = (selectedNode) => {
    if (selectedNode && selectedNode.children) {
      return (
        <div>
          {selectedNode.children.map((child) => (
            <TilesRendering key={child.id} selectedNode={child} />
          ))}
        </div>
      );
    }
    return null;
  };

  // Filter the tree based on the entered text
  const filteredData = data.filter((node) =>
    node.name.toLowerCase().includes(filterText.toLowerCase())
  );

  return (
    <div style={{ display: "flex", flexDirection: "column", alignItems: "center" }}>
      <input
        type="text"
        placeholder="Search..."
        value={filterText}
        onChange={(e) => setFilterText(e.target.value)}
        style={{ marginBottom: "10px" }}
      />
      <TreeView
        defaultCollapseIcon={<span>-</span>}
        defaultExpandIcon={<span>+</span>}
        onNodeSelect={handleNodeSelect}
      >
        {filteredData.map((node) => renderTree(node))}
      </TreeView>
      <div style={{ marginLeft: "20px" }}>
        {renderChildrenAsTiles(selectedNode)}
      </div>
    </div>
  );
};

export default Homepage;
